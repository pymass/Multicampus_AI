def push(item): # 삽입 연산
    stack.append(item)  
def peek(): # top 항목 접근
    if len(stack) != 0:
        return stack[-1]
def pop(): # 삭제 연산
    if len(stack) != 0:
        item = stack.pop(-1)      
        return item

def infix_to_postfix(input_expr):
    precedence = {}
    precedence['*'] = 3
    precedence['/'] = 3
    precedence['+'] = 2
    precedence['-'] = 2
    precedence['('] = 1
    result = []
    token_list = input_expr.split()
    for token in token_list:
        if token in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' or token in '0123456789':
            result.append(token)
        elif token == '(':
            push(token)
        elif token == ')':
            top = pop()
            while top != '(':
                result.append(top)
                top = pop()
        else:
            while (len(stack) != 0) and (precedence[peek()] >= precedence[token]):
                result.append(pop())
            push(token)

    while len(stack) != 0:
        result.append(stack.pop())
    return ' '.join(result)

stack = []
print(infix_to_postfix('A * B + C * D'))
print(infix_to_postfix('( A + B ) * C - ( D - E ) * ( F + G )'))
print(infix_to_postfix('A + B * C / ( D - E )'))

