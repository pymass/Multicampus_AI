arrange(class)
df10 %>%
select(class, math, english) %>%
filter(class == 1) %>%
arrange(desc(math))
df_temp <- df10 %>%
filter(class %in% c(1,3,5)) %>%
arrange(desc(english))
a <- 10
if(is.integer(a)){
print("X is ans Integer")
}
al <- 10L
if(is.integer(al)){
print("X is an Integer")
}
a2 <- c("What", "is", "truth")
if("Truth" %in% a2){
print("True")
} else {
print("False")
}
a3 <- switch(3, "One", "Two", "Three", "Four")
a3
a4 <- c("Hello", "R loop")
cnt <- 2
repeat{
print(a4)
cnt <- cnt + 1
print(cnt)
if(cnt > 5) {
break;
}
}
a5 <- c("Hello", "R loop")
cnt <- 2
while(cnt < 7){
print(a5)
cnt = cnt +1
}
a6 <- LETTERS[1:4]
a7 <- letters[1:4]
for(i in a6){
print(i)
}
myfunc <- function(a){
for(i in 1:a){
b <- 1*2
print(b)
}
}
myfunc(10)
myfunc2 <- function(){
for (i in 1:5){
print(i * 2)
}
}
myfunc2()
myfunc3(1,2)
myfunc3 <- function(a,b){
r <- a+b
print(r)
}
myfunc3(1,2)
myfunc3(a=1, b=2)
myfunc3(b=2, a=1)
myfunc3(1, b=3)
myfunc4 <- function(a=0, b=0){
r <- a + b
print(r)
}
myfunc4(a=1)
myfunc4(b=2)
myfunc5 <- function(a){c <- a}
myfunc5(1
myfunc5 <- function(a){c <- a}
myfunc5(1)
myfunc5 <- function(a){c <- a}
myfunc5(1)
df <- read.csv("exam.csv")
str(df)
df %>% select(id, class, math)
df %>%
select(id, class, math) %>%
filter(class == 1) %>%
arrange(desc(id))
df %>%
arrange(class, desc(id)) %>%
head(5)
df %>%
arrange(class, desc(id)) %>%
mutate(total = math + english + science,
mean = (math + english + science)/3)
library(magrittr)
df %>%
arrange(class, desc(id)) %>%
mutate(total = math + english + science,
mean = (math + english + science)/3)
df %>%
group_by(class)
df %>%
group_by(class) %>%
summarise(mean_math = mean(math),
median_math = median(math))
df %>%
group_by(class) %>%
summarise(mean_math = mean(math),
median_math = median(math),
sum_math = sum(math))
mpg <- as.data.frame(ggplot2::mpg)
str(mpg)
select(mpg, class)
mpg %>%
group_by(class) %>%
summarise(mean_cty=mean(cty))
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy))
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
order_by(mean_hwy)
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
order()
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
order()
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy))
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
ordered()
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy))
df6 <- select(df, Index, State)
df6
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
head(5)
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(mean_hwy) %>%
head(5)
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(desc(mean_hwy)) %>%
head(5)
mpg %>%
filter(displ <= 4 | displ > 5)
mpg %>%
filter(displ <= 4 | displ > 5) %>%
group_by(manufacturer)
mpg %>%
group_by(manufacturer) %>%
filter(displ <= 4 | displ >5)
mpg %>%
group_by(manufacturer) %>%
filter(displ <= 4 | displ >5) %>%
summarise(mean_four = mean(displ <= 4), mean_five = mean(displ >5))
# 1번 문제
mpg %>%
group_by(manufacturer) %>%
filter(displ <= 4 | displ >5) %>%
summarise(mean_four = mean(hwy), mean_five = mean(hwy))
mpg %>%
filter(displ <= 4 | displ >5) %>%
group_by(manufacturer) %>%
summarise(mean(hwy))
mpg %>%
group_by(manufacturer) %>%
filter(manufacturer = "audi")
mpg %>%
group_by(manufacturer) %>%
filter(manufacturer == "audi")
mpg %>%
group_by(manufacturer) %>%
filter(manufacturer == "audi") %>%
summarise(mean(cty))
mpg %>%
group_by(manufacturer) %>%
filter(manufacturer == "toyota") %>%
summarise(mean(cty))
mpg %>%
group_by(manufacturer) %>%
filter(displ <= 4) %>%
summarise(mean(hwy))
mpg %>%
group_by(manufacturer) %>%
filter(displ > 5) %>%
summarise(mean(hwy))
mpg %>%
group_by(displ <= 4) %>%
group_by(displ >= 5) %>%
filter(displ <= 4 | displ >= 5) %>%
summarise(mean_why = mean(why)) %>%
arrange(desc(mean_hwy))
mpg %>%
group_by(displ <= 4) %>%
group_by(displ >= 5) %>%
filter(displ <= 4 | displ >= 5) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(desc(mean_hwy))
mpg %>%
select(manufacturer, cty)
mpg %>%
select(manufacturer, cty) %>%
filter(manufacturer == 'auid' | manufacturer == 'toyota')
mpg %>%
select(manufacturer, cty) %>%
filter(manufacturer == 'auid' | manufacturer == 'toyota') %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
mpg %>%
select(manufacturer, cty) %>%
filter(manufacturer == 'auid' | manufacturer == 'toyota') %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
mpg %>%
select(manufacturer, cty) %>%
filter(manufacturer == 'auid' | manufacturer == 'toyota')
mpg %>%
select(manufacturer, cty) %>%
filter(manufacturer == 'audi' | manufacturer == 'toyota') %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
mpg %>%
select(manufacturer)
mpg %>%
select(manufacturer, hwy)
mpg %>%
filter(manufacturer == 'chevrolet' | manufacturer == 'ford' | manufacturer == 'honda') %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy))
mpg %>%
filter(manufacturer == 'chevrolet' | manufacturer == 'ford' | manufacturer == 'honda') %>%
summarise(mean_hwy = mean(hwy))
mpg_copy
mpg_copy <- mpg %>%
mutate(totaly = cty + hwy)
mpg_copy
mpg_copy %>%
mutate(mean_total = (cty+hwy) /2 )
mpg_copy %>%
arrange(desc(mean_total))
mpg_copy %>%
mutate(mean_total = (cty+hwy)/2)
mpg_copy
mpg_copy %>%
mutate(mean_total = totaly/2)
mpg_copy
mpg_copy %>%
arrange(desc(mean_total))
mpg_copy %>%
mutate(mean_total = totaly/2) %>%
arrange(desc(mean_total)) %>%
head(3)
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise('count' = n()) %>%
arrange(desc(count))
setwd("C:\\Users\\user\\Desktop\\new\\Labfiles\\Lab02")
# Examine the structure of the data file
flightDataSampleCsv <- "2000.csv"
flightDataSample <- rxImport(flightDataSampleCsv, numRows = 10)
rxGetVarInfo(flightDataSample)
# The structure of the data
flightDataColumns <- c("Year" = "factor",
"DayofMonth" = "factor",
"DayOfWeek" = "factor",
"UniqueCarrier" = "factor",
"Origin" = "factor",
"Dest" = "factor",
"CancellationCode" = "factor"
)
# Read the CSV file and write it out as an XDF file
flightDataXdf <- "2000.xdf"
rxOptions(reportProgress = 1)
flightDataSampleXDF <- rxImport(inData = flightDataSampleCsv, outFile = flightDataXdf, overwrite = TRUE, append = "none", colClasses = flightDataColumns)
# Check the structure of the new file
rxGetVarInfo(flightDataXdf)
system.time(csvDelaySummary <- rxSummary(~., flightDataSampleCsv))
system.time(xdfDelaySummary <- rxSummary(~., flightDataSampleXDF))
# Generate crosstabs and cubes for cancelled flights - still comparing performance
system.time(csvCrossTabInfo <- rxCrossTabs(~as.factor(Month):as.factor(Cancelled == 1), flightDataSampleCsv))
system.time(xdfCrossTabInfo <- rxCrossTabs(~as.factor(Month):as.factor(Cancelled == 1), flightDataSampleXDF))
system.time(csvCubeInfo <- rxCube(~as.factor(Month):as.factor(Cancelled), flightDataSampleCsv))
system.time(xdfCubeInfo <- rxCube(~as.factor(Month):as.factor(Cancelled), flightDataSampleXDF))
# Tidy up memory
rm(flightDataSample, flightDataSampleXDF, csvDelaySummary, xdfDelaySummary,
csvCrossTabInfo, xdfCrossTabInfo, csvCubeInfo, xdfCubeInfo)
remoteLogin("http://tetetestml.eastus.cloudapp.azure.com:12800", session = TRUE, diff = TRUE, commandline = TRUE)
pause()
putLocalObject(c("flightDataColumns"))
resume()
ls()
# Transform the data - create a combined Delay column, filter all cancelled flights, and discard FlightNum, TailNum, and CancellationCode
# Test import and transform over a small sample first
flightDataSampleXDF <- rxImport(inData = "\\\\C:\\Users\\user\\Desktop\\new\\Labfiles\\Lab02\\2000.csv", outFile = "\\\\C:\\Users\\user\\Desktop\\new\\Labfiles\\Lab02\\Sample.xdf", overwrite = TRUE, append = "none", colClasses = flightDataColumns,
transforms = list(
Delay = ArrDelay + DepDelay + ifelse(is.na(CarrierDelay), 0, CarrierDelay) + ifelse(is.na(WeatherDelay), 0, WeatherDelay) + ifelse(is.na(NASDelay), 0, NASDelay) + ifelse(is.na(SecurityDelay), 0, SecurityDelay) + ifelse(is.na(LateAircraftDelay), 0, LateAircraftDelay),
MonthName = factor(month.name[as.numeric(Month)], levels=month.name)),
rowSelection = (Cancelled == 0),
varsToDrop = c("FlightNum", "TailNum", "CancellationCode"),
numRows = 1000
)
flightDataSampleXDF <- rxImport(inData = "\\\\C:\\Users\\user\\Desktop\\new\\Labfiles\\Lab02\\2000.csv", outFile = "\\\\C:\\Users\\user\\Desktop\\new\\Labfiles\\Lab02\\Sample.xdf", overwrite = TRUE, append = "none", colClasses = flightDataColumns, transforms = list(Delay = ArrDelay + DepDelay + ifelse(is.na(CarrierDelay), 0, CarrierDelay) + ifelse(is.na(WeatherDelay), 0, WeatherDelay) + ifelse(is.na(NASDelay), 0, NASDelay) + ifelse(is.na(SecurityDelay), 0, SecurityDelay) + ifelse(is.na(LateAircraftDelay), 0, LateAircraftDelay), MonthName = factor(month.name[as.numeric(Month)], levels=month.name)), rowSelection = (Cancelled == 0), varsToDrop = c("FlightNum", "TailNum", "CancellationCode"), numRows = 1000)
# Transform the data - create a combined Delay column, filter all cancelled flights, and discard FlightNum, TailNum, and CancellationCode
# Test import and transform over a small sample first
flightDataSampleXDF <- rxImport(inData = "C:\\Users\\user\\Desktop\\new\\Labfiles\\Lab02\\2000.csv", outFile = "C:\\Users\\user\\Desktop\\new\\Labfiles\\Lab02\\Sample.xdf", overwrite = TRUE, append = "none", colClasses = flightDataColumns, transforms = list(Delay = ArrDelay + DepDelay + ifelse(is.na(CarrierDelay), 0, CarrierDelay) + ifelse(is.na(WeatherDelay), 0, WeatherDelay) + ifelse(is.na(NASDelay), 0, NASDelay) + ifelse(is.na(SecurityDelay), 0, SecurityDelay) + ifelse(is.na(LateAircraftDelay), 0, LateAircraftDelay), MonthName = factor(month.name[as.numeric(Month)], levels=month.name)), rowSelection = (Cancelled == 0), varsToDrop = c("FlightNum", "TailNum", "CancellationCode"), numRows = 1000)
# Transform the data - create a combined Delay column, filter all cancelled flights, and discard FlightNum, TailNum, and CancellationCode
# Test import and transform over a small sample first
flightDataSampleXDF <- rxImport(inData = "C:\\TestData\\2000.csv", outFile = "C:\\TestData\\Sample.xdf", overwrite = TRUE, append = "none", colClasses = flightDataColumns, transforms = list(Delay = ArrDelay + DepDelay + ifelse(is.na(CarrierDelay), 0, CarrierDelay) + ifelse(is.na(WeatherDelay), 0, WeatherDelay) + ifelse(is.na(NASDelay), 0, NASDelay) + ifelse(is.na(SecurityDelay), 0, SecurityDelay) + ifelse(is.na(LateAircraftDelay), 0, LateAircraftDelay), MonthName = factor(month.name[as.numeric(Month)], levels=month.name)), rowSelection = (Cancelled == 0), varsToDrop = c("FlightNum", "TailNum", "CancellationCode"), numRows = 1000)
head(flightDataSampleXDF, 100)
# Combine separate CSV files containing data for each year into one big XDF file, performing the same transformations (which have now been tested)
rxOptions(reportProgress = 1)
exit
# Import airport data from the Airports table in the AirlineData database, and save it as an XDF file
conString <- "Driver=SQL Server;Server=chaemyung.database.windows.net;Database=AirlineData;Uid=admin2019;Pwd=Pa$$w0rd2019"
airportData <- RxSqlServerData(connectionString = conString, table = "Airports")
# Examine the first few rows of data
head(airportData)
# Import airport data from the Airports table in the AirlineData database, and save it as an XDF file
conString <- "Driver=SQL Server;Server=chaemyung.database.windows.net;Database=AirlineData;Uid=admin2019;Pwd=Pa$$w0rd2019"
airportData <- RxSqlServerData(connectionString = conString, table = "Airports")
# Examine the first few rows of data
head(airportData)
# Import airport data from the Airports table in the AirlineData database, and save it as an XDF file
conString <- "Driver=SQL Server;Server=chaemyung.database.windows.net;Database=AirlineData;Uid=admin2019;Pwd=Pa$$w0rd2019"
airportData <- RxSqlServerData(connectionString = conString, table = "Airports")
# Examine the first few rows of data
head(airportData)
# Import the data to a data frame
airportInfo <- rxImport(inData = airportData, stringsAsFactors = TRUE)
head(airportInfo)
# Connect remotely
remoteLogin("http://tetetestml.eastus.cloudapp.azure.com:12800", session = TRUE, diff = TRUE, commandline = TRUE)
# Connect remotely
remoteLogin("http://tetetestml.eastus.cloudapp.azure.com:12800", session = TRUE, diff = TRUE, commandline = TRUE)
# Install dplyrXdf
install.packages("dplyr")
install.packages("devtools")
devtools::install_github("RevolutionAnalytics/dplyrXdf")
library(dplyr)
library(dplyrXdf)
# Read in a subset of the data from the XDF file containing the data to be summarized (discard all the other columns)
enhancedDelayDataXdf <- "C:\\Users\\user\\Desktop\\new\\Labfiles\\Lab02\\EnhancedFlightDelayData.xdf"
essentialData <-RxXdfData(enhancedDelayDataXdf, varsToKeep = c("Delay", "Origin", "Dest", "OriginState", "DestState"))
# Summarize the data using dplyrXdf
originAirportStats <- filter(essentialData, !is.na(Delay)) %>%
select(Origin, Delay) %>%
group_by(Origin) %>%
summarise(mean_delay = mean(Delay), .method = 1) %>% # Use methods 1 or 2 only
arrange(desc(mean_delay)) %>%
persist("C:\\temp.xdf")  # Return a reference to a persistent file. By default, temp files will be deleted
head(originAirportStats, 100)
# Summarize the data using dplyrXdf
originAirportStats <- filter(essentialData, !is.na(Delay)) %>%
select(Origin, Delay) %>%
group_by(Origin) %>%
summarise(mean_delay = mean(Delay), .method = 1) %>% # Use methods 1 or 2 only
arrange(desc(mean_delay)) %>%
persist("C:\\Users\\user\\Desktop\\new\\Labfiles\\Lab02\\temp.xdf")  # Return a reference to a persistent file. By default, temp files will be deleted
head(originAirportStats, 100)
destAirportStats <- filter(essentialData, !is.na(Delay)) %>%
select(Dest, Delay) %>%
group_by(Dest) %>%
summarise(mean_delay = mean(Delay), .method = 1) %>%
arrange(desc(mean_delay)) %>%
persist("C:\\Users\\user\\Desktop\\new\\Labfiles\\Lab02\\temp.xdf")
head(destAirportStats, 100)
originStateStats <- filter(essentialData, !is.na(Delay)) %>%
select(OriginState, Delay) %>%
group_by(OriginState) %>%
summarise(mean_delay = mean(Delay), .method = 1) %>%
arrange(desc(mean_delay)) %>%
persist("C:\\Users\\user\\Desktop\\new\\Labfiles\\Lab02\\temp.xdf")
head(originStateStats, 100)
destStateStats <- filter(essentialData, !is.na(Delay)) %>%
select(DestState, Delay) %>%
group_by(DestState) %>%
summarise(mean_delay = mean(Delay), .method = 1) %>%
arrange(desc(mean_delay)) %>%
persist("C:\\Users\\user\\Desktop\\new\\Labfiles\\Lab02\\temp.xdf")
head(destStateStats, 100)
install.packages("tidyverse")
library(tidyverse)
mtcars
ggplot(mtcars) + geom_point(mapping = aes(x=mpg, y=disp))
ggplot(mtcars, mapping = aes(x=mpg, y=disp)) + geom_point()
p <- ggplot(mtcars, mapping = aes(x=mpg, y=disp))
p +  + geom_point() + geom_line()
p + geom_point() + geom_line()
p + geom_point() + geom_line() + geom_smooth(method = "1m")
p + geom_point() + geom_line() + geom_smooth(method = "lm", formula = y - ploy(x,2))
p + geom_point() + geom_line() + geom_smooth(method = "lm", formula = y - ploy(x,2))
p + geom_point() + geom_line() + geom_smooth(method = "lm", formula = y ~ ploy(x,2))
p + geom_point() + geom_line() + geom_smooth(method = "lm", formula = y ~ plot(x,2))
ggplot(mtcars, mapping =  aes(x = disp, y = mpg, color = factor(am, levels = c(0,1), labels = c("Automatic", "Manual")))) + scale_color_manual(values = c("blue", "yellow")) + geom_point() + labs(color - "Transmission")
ggplot(mtcars, mapping =  aes(x = disp, y = mpg, color = factor(am, levels = c(0,1), labels = c("Automatic", "Manual")))) + scale_color_manual(values = c("blue", "yellow")) + geom_point() + labs(color = "Transmission")
# Create a data frame containing 2% of the flight delay data
setwd("C:\\Users\\user\\Desktop\\new\\Demofiles\\Mod03")
airlineDataFile <- "FlightDelayReasonData.xdf"
airlineData <- rxImport(airlineDataFile,
rowSelection = (Delay > 0) & as.logical(rbinom(n = .rxNumRows, size = 1, prob = 0.05)))
rxGetInfo(airlineData, getVarInfo = TRUE)
# Generate a plot of Departure Delay time versus Arrival Delay time
ggplot(data = airlineData) +
geom_point(mapping = aes(x = ArrDelay, y = DepDelay), alpha = 1/50) +
xlab("Arrival Delay (minutes") +
ylab("Departure Delay (minutes)")
ggplot(data = airlineData) +
geom_point(mapping = aes(x = ArrDelay, y = DepDelay), alpha = 1/50) +
xlab("Arrival Delay (minutes") +
ylab("Departure Delay (minutes)")
# Generate a plot of Departure Delay time versus Arrival Delay time
ggplot(data = airlineData) + geom_point(mapping = aes(x = ArrDelay, y = DepDelay), alpha = 1/50) + xlab("Arrival Delay (minutes") + ylab("Departure Delay (minutes)")
# Fit a regression line to this data
ggplot(data = airlineData, mapping = aes(x = ArrDelay, y = DepDelay)) +
geom_point(alpha = 1/50) +
geom_smooth(color = "red") +
xlab("Arrival Delay (minutes") +
ylab("Departure Delay (minutes)")
# Facet by month
ggplot(data = airlineData, mapping = aes(x = ArrDelay, y = DepDelay)) +
geom_point(alpha = 1/50) +
geom_smooth(color = "red") +
facet_wrap( ~ MonthName, nrow = 3) +
xlab("Arrival Delay (minutes") +
ylab("Departure Delay (minutes)")
# Use the flight delay data
setwd("C:\\Users\\user\\Desktop\\new\\Demofiles\\Mod03")
airlineDataFile <- "FlightDelayData.xdf"
airlineData <- RxXdfData(airlineDataFile)
rxGetInfo(airlineData, getVarInfo = TRUE)
# Create a histogram showing the number of flights departing from each state
rxHistogram(~OriginState, airlineData,
xTitle = "Departure State",
yTitle = "Number of Flights",
scales = (list(
x = list(rot = 90, cex = 0.5)
)))
# Filter the data to only count late flights
rxHistogram(~OriginState, airlineData, rowSelection = ArrDelay > 0,
xTitle = "Departure State",
yTitle = "Number of Late Flights",
scales = (list(
x = list(rot = 90, cex = 0.5)
)))
# Flights by Carrier
flightsByCarrier <- rxHistogram(~UniqueCarrier, airlineData,
xTitle = "Carrier",
yTitle = "Number of Flights",
yAxisMinMax = c(0, 2E6),
scales = (list(
x = list(rot = 90, cex = 0.6)
)))
# Late flights by carrier
lateFlightsByCarrier <- rxHistogram(~UniqueCarrier, airlineData, rowSelection = ArrDelay > 0,
xTitle = "Carrier",
yTitle = "Number of Late Flights",
yAxisMinMax = c(0, 2E6),
plotAreaColor = "transparent",
fillColor = "magenta",
scales = (list(
x = list(rot = 90, cex = 0.6)
)))
# Display both histograms in adjacent panels
install.packages("latticeExtra")
library(latticeExtra)
print(c(flightsByCarrier, lateFlightsByCarrier))
# Overlay the histograms
print(flightsByCarrier + lateFlightsByCarrier)
# Create a data frame containing 2% of the flight delay data
setwd("C:\\Users\\user\\Desktop\\new\\Demofiles\\Mod03")
airlineDataFile <- "FlightDelayReasonData.xdf"
airlineData <- rxImport(airlineDataFile,
rowSelection = (Delay > 0) & as.logical(rbinom(n = .rxNumRows, size = 1, prob = 0.05)))
rxGetInfo(airlineData, getVarInfo = TRUE)
# Generate a plot of Departure Delay time versus Arrival Delay time
ggplot(data = airlineData) + geom_point(mapping = aes(x = ArrDelay, y = DepDelay), alpha = 1/50) + xlab("Arrival Delay (minutes") + ylab("Departure Delay (minutes)")
# Fit a regression line to this data
ggplot(data = airlineData, mapping = aes(x = ArrDelay, y = DepDelay)) +
geom_point(alpha = 1/50) +
geom_smooth(color = "red") +
xlab("Arrival Delay (minutes") +
ylab("Departure Delay (minutes)")
# Facet by month
ggplot(data = airlineData, mapping = aes(x = ArrDelay, y = DepDelay)) +
geom_point(alpha = 1/50) +
geom_smooth(color = "red") +
facet_wrap( ~ MonthName, nrow = 3) +
xlab("Arrival Delay (minutes") +
ylab("Departure Delay (minutes)")
