t_vector
t_vector <= 3
t_vector > 3
t_vector[t_vector <= 12]
t_vector[t_vector > 12]
vector_m <- c(1,2,3,4,5)
vector_m
vector_m[3] <- 10
vector_m
vector_m
vector_m[vector_m >5] <-3
vector_m
vector_m
vector_m[2:5] <- 0
vector_m
vector_m
vector_m <- 1
vector_m
vector_m <-c(1,2,3,4,5)
length(vector_m)
vector_m[1:length(vector_m)] <- 1
vector_m
v_add <- c(1,2,3,4,5)
v_add <- c(0, v_add)
v_add
v_add <- c(c(-2,-1), v_add)
v_add
v_add <-c(v_add,6)
v_add
v_add <-c(v_add, 7:10)
v_add
t_add1 <- c(1,2,3)
t_add2 <- c(4,5,6)
t_add3 <- c(7,8,9)
new_add <- c(t_add1, t_add2, t_add3)
new_add
vector_a <- c("A", "B", "C", "F", "G")
vector_b <- c("D", "E")
append(vector_a, vector_b, 3)
vector_a
t_vector[c(1,3,5,6)]
t_vector[-c(1,3,5,6)]
length(t_vector)
t_vector[-length(t_vector)]
logical_var <- c(FALSE, TRUE, TRUE, FALSE, FALSE)
logical_var
!logical_var
v_str
v_str <- c("첫째", "둘째", "셋째", "넷째", "다섯째")
v_str
v_str[logical_var]
v_str[!logical_var]
a <- c(1,2,3,4)
b <- c(5,6,7,8)
c <- a+b
c
c <- a-b
c
c <- a*b
c
a <- c(1,2,3,4)
b <- c(5,6)
c <- a+b
c
c <- b+a
c
c <- a-b
c
c <- a*b
c
a <- c(1,2,3,4)
c <- a*2
c
b <- c(2)
c <- a*b
c
b <- c(2,2,2,2)
c <- a*b
c
b <- c(1,2)
a <- c(1,2,3,4)
print(a+b)
print(a+b)
a <- c(1,2,3,4)
b <- c(1,2,3)
print(a+b)
id <- c('F1', 'F2', 'F3')
name <- c('김가수', '박인호', '고소미')
age <- c(32, 28, 22)
isMarried <- c(T,T,F)
df <- data.frame(id, name, age, isMarried)
df
stf(df)
df <- data.frame(id, name, age, isMarried, stringsAsFactors = F)
str(df)
df <- data.frame(name=c('김가수', '박인호'), age=c(32,28))
df
id <- c('F1', 'F2', 'F3')
df <- data.frame(id, name, age, isMarried)
df
df[2,3]
df[c(2,3), c(2,4)]
df[, c(2,3)]
df[c(2,3),]
df[, c("name", "age")]
df
df$name
df$age
str(df$age)
sum(df$age)
df$age[2:3]
iris
str(iris)
nrow(iris)
ncol(iris)
head(iris, 3)
tail(iris, 3)
summary(iris)
min(Sepal.Length)
min(iris$Sepal.Length)
max(iris$Sepal.Length)
median(iris$Sepal.Length)
meam(iris$Sepal.Length)
quantile(iris$Sepal.Length)
Vie(iris)
View(iris)
subset(iris, Sepal.Length > 7)
subset(iris, Sepal.Length >7 & Petal.Length <= 6.5)
subset(iris, Sepal.Length > 7 | Petal.Length >= 6.5)
subset(iris, Sepal.Length > 7.2 & Petal.Length <= 6.5, c('Sepal.Length', 'Species'))
subset(iris, Sepal.Length > 7.2 & Petal.Length <=6.5, c('Sepal.Length', 'Species'))
subset(iris, Sepal.Length > 7.2 & Petal.Length <=6.5, c('Species', 'Sepal.Length'))
subset(iris, Species == 'setosa')
str(subset(iris, Species == 'setosa'))
nrow(subset (iris, Species == 'setosa'))
summary(subset(iris, Species == 'setosa'))
subset(iris, Sepal.Length == 7.2, c('Species', 'Sepal.Length'))
subset(Sepal.Length == 7.2, iris, c('Species', 'Sepal.Length'))
subset(x=iris, subset=(Sepal.Length == 7.2), select=c('Species', 'Sepal.Length'))
subset(select=c('Species', 'Sepal.Length'), subset=(Sepal.Length == 7.2), x=iris)
name <- c('김가수', '박인호', '어만데', '이기성')
age <- c(23, 28, 15, 22)
weight <- c(67, 75, 73, 80)
ex_df <- data.frame(name, age, weight)
ex_df
ex_df[,]
ex_df[c("1", "2"), c("name", "weight")]
ex_df[c(1,2), c(1,3)]
ex_df[c(T,T,F,T), c(T,F,T)]
ex_df$age
ex_df$age >25
ex_df[ex_df$age >25,]
str(longley)
longley
longley[longley$GNP > 200 & longley$Population >= 109 & longley$Year > longley$Employed > 50,]
longley[longley$GNP > 200 & longley$Population >= 109 & longley$Year > 1960 & longley$Employed > 50,]
attach(longley)
longley[GNP > 200 & Population >= 109 & Year > 1960 & Employed > 50,]
detach(longley)
longley[GNP > 200 & Population >= 109 & Year > 1960 & Employed > 50,]
longley[, c("GNP", "Year")]
str(longley[, c("GNP", "Year")])
longley[, c("GNP"), drop=F]
str(longley[, c("GNP")], drop=F)
str(iris)
subset(iris, Sepal.Length >= 7.6 & Species == 'virginica', c("Species", "Sepal.Length"))
iris[iris$Sepal.Length >= 7.6 & iris$Species == 'virginica', c("Species", "Sepal.Length")]
longley
install.packages("sqldf")
library(sqldf)
sqldf("select GNP, Year, Employed from longley where GNP > 400")
sqldf("select Year, sum(GNP) from longley where Year > 1960 group by Year")
ex_df
ex_df[c(1,2,4),]
ex_df[c(4,2,1),]
ex_df
ex_df$age
order(ex_df$age)
ex_df[order(ex_df$age),]
ex_df[order(ex_df$age, decreasing = T),]
alpha <- c('A', 'C', 'F', 'B', 'E', 'D')
alpha
order(alpha)
alpha[order(alpha)]
sort(alpha)
dept <- c('개발부', '개발부', '개발부', '개발부', '영업부', '영업부', '영업부', '영업부')
position <- c('과장', '과장', '차장', '차장', '과장', '과장', '차장', '차장')
name <- c('김가윤', '고동산', '박기성', '이소균', '황가인', '최유리', '김재석', '유상균')
salary <- c(5400, 5100, 7500, 7300, 4900, 5500, 6000, 6700)
worktime <- c(15,18,10,12,17,20,8,9)
com_data <- data.frame(dept, position, name, salary, worktime)
com_data
aggregate(salary ~ depy, com_data, mean)
aggregate(salary ~ dept, com_data, mean)
aggregate(cbind(salary, worktime) ~ dept, com_data, mean)
aggregate(salary ~ dept + position, com_data, mean)
ex_df
ex_df_m <- edit(ex_df)
ex_df
ex_df_m
df
df[1,3]
df[1,3] <- 100
id <- c('F1', 'F2', 'F3')
name <- c(' 김가수 ', '박인호 ', '고소미')
age <- c(32 , 28 , 22 )
isMarried <- c(TRUE , TRUE , FALSE)
df < - data.frame(id, name, age, isMarried)
df[1,3]
df[1,3] <- 100
id <- c('F1', 'F2', 'F3')
name <- c(' 김가수 ', '박인호 ', '고소미')
age <- c(32 , 28 , 22 )
isMarried <- c(TRUE , TRUE , FALSE)
df < - data.frame(id, name, age, isMarried)
df < - data.frame(id, name, age, isMarried)
df <- data.frame(id, name, age, isMarried)
df
df[1,3]
df[1,3] <- 100
df[1,3]
df
subset(iris, Species == 'virginica' & Petal.Width >= 2.4)
iris[iris$Species == 'virginica' & iris$Petal.Width >= 2.4, c("Petal.Length")] <- 1
subset(iris, Species == 'virginica' & Petal.Width >= 2.4)
head(iris)
iris$Sepal.Width <- iris$Sepal.Width*2
head(iris)
iris$new_column <- '신규열'
head(iris)
iris$new_column <- NULL
head(iris)
new_iris <- iris[, -c(1,2,3)]
head(new_iris)
head(iris)
iris[, c(1,2,3)] <- list(NULL)
head(iris)
ex_na <- c(1,2, NA, NA, 3)
print(ex_na)
sum(ex_na)
sum(ex_na, na.rm=TRUE)
ex_null <- c(1,2, NULL, NULL, 3)
print(ex_null)
sum(ex_null)
ex_cc <- c(1,2, NA, 4, NA)
complete.cases(ex_cc)
head(iris)
iris$Sepal.Length <- 0
iris$Sepal.Width <- 0
iris$Sepal.Length <- NULL
iris$Petal.Width <- NULL
head(iris)
data(iris)
head(iris)
colnames(iris)
colnames(iris)[3] <- "3th_Column"
colnames(iris)
head(iris)
colnames(iris) <- c('꽃받침길이', '꽃받침너비', '꽃잎길이', '꽃잎너비', '종류')
colnames(iris)
head(iris)
hotel_rooms <- read.table (file = 'clipboard', header = TRUE, sep = '\t', stringsAsFactors = FALSE)
hotel_rooms <- read.table (file = 'clipboard', header = TRUE, sep = '\t', stringsAsFactors = FALSE)
getwd
getwd()
hotel_rooms <- read.table (file = 'clipboard', header = TRUE, sep = '\t', stringsAsFactors = FALSE)
hotel_rooms <- read.table (file = 'clipboard', header = TRUE, sep = '\t', stringsAsFactors = FALSE)
hotel_rooms <- read.table (file = "clipboard", header=TRUE , sep=" t", stringsAsFactors=FALSE )
hotel_rooms <- read.table (file = "clipboard", header=TRUE , sep=" t", stringsAsFactors=FALSE )
hotel_rooms <- read.table (file = "clipboard", header=TRUE , sep="\t", stringsAsFactors=FALSE )
hotel_rooms
str(hotel_rooms)
hotel_rooms$room_type <- as.factor(hotel_rooms$type)
hotel_rooms$room_number <- as.character(hotel_rooms$room_number)
str(hotel_rooms)
str(hotel_rooms)
aggregate(price ~ room_type, hotel_rooms, mean)
hotel_rooms$price <- as.numeric(hotel_rooms$price)
str(hotel_rooms)
aggregate(price ~ type, hotel_rooms, mean)
id <- c('F1', 'F2', 'F3', 'F4')
name <- c('김가인', '박지성', '고아라', '이승철')
age <- c(24,32,18,40)
ex_df_age <- data.frame(id, name, age)
ex_df_age
id <- c('F2', 'F1', 'F4', 'F3')
name <- c('박지성', '김가인', '이승철', '고아라')
age <- c(95,100,56,73)
ex_df_score <- data.frame(id, name, age)
ex_df_score
cbind(ex_df_age, ex_df_score)
merge(ex_df_age, ex_df_score, by=c('id', 'name'))
merge(ex_df_age, ex_df_score, by=c('id'))
ex_df_age
ex_row_add <- data.frame(id='F5', name= '나지용', age=27)
ex_row_add
ex_rbind <- rbind(ex_df_age, ex_row_add)
ex_rbind
rm(list=ls())
install.packages("ggplot2")
library(gggplot2)
library(ggplot2)
data <- c("East", "West", "East", "North", "North", "East")
data
mode(data)
data2 <- factor(data)
mode(data)
mode(data2)
data2
mode(data2)
is.factor(data2)
data3 <- c("East", "West", "East", "North", "North", "East")
data4 <- factor(data3, levels = c("East", "West", "North"))
data4
data5
data5 <- factor(data3, levels = c("East", "West", "North", "South")) #임의로 넣을 수 있음
data5
data6 <- gl(3, 4, labels = c("East", "West", "South"))
data6
# Matrix
matrix(c(1,2,3,4))
# Matrix
data7 <- matrix(c(1,2,3,4))
data7
data8 <- matrix(c(1,2,3,4), nrow = 2)
data8
data9 <- matrix(3:14, nrow = 4)
data9
data10 <- matrix(1:6, nrow=2, ncol = 3)
data10
data11 <- matrix(3:14, nrow= 4, byrow = F)
data11
data12 <- matrix(3:14, nrow = 4, byrow = TRUE,
dimnames = list(c('row1', 'row2', 'row3', 'row4'), c('col1', 'col2', 'col3')))
data12
data11[1,3]
data11[4,2]
data11[2,]
data11[,3]
data13 <- c(10,11,12,13,14,15)
data <- list("Apple", "Green", 10.20, c(1,2,3,4))
data37 <- list("Apple", "Green", 10.20, c(1,2,3,4))
data37
data37 <- list("Apple", "Green", 10.20, c(1,2,3,4))
data37
data37 <- list("Apple", "Green", 10.20, c(1,2,3,4), c('test1', 'test2', 3))
data37
data38 <- list("Apple", "Green", 10.20, c(1,2,3,4), c('test1', 'test2', 3),
matrix(c(1,2,3,4)))
data38
data38[1]
data38[2]
data39 <- list("Apple", "Green", 10.20, c(1,2,3,4), c('test1', 'test2', 3),
matrix(c(1,2,3,4)), list(1,"2",T))
data39
data39[7]
names(data39) <- c('item1','item2','item3','item4','item5','item6','item7')
data39
data39$item1
temp <- c(1,2,3,4)
df <- data.frame(temp)
df
mode(df)
temp2 <- matrix(c(1,2,3,4))
df2 <- data.frame(temp2)
df2
emp <- data.frame(emp_id = c(1:3), emp_name = c('Tom', 'John', 'Amy'),
salary = c(2000,3000,4000),
start_date = c('2019-01-01', '2019-02-01', '2019-03-01'))
emp
str(emp)
emp <- data.frame(emp_id = c(1:3), emp_name = c('Tom', 'John', 'Amy'),
salary = c(2000,3000,4000),
start_date = c('2019-01-01', '2019-02-01', '2019-03-01'),
stringsAsFactors = F)
str(emp)
summary(emp)
emp$emp_id
emp$emp_name
emp$salary
emp$start_date
emp
emp[1,2]
emp[c(1,2),c(1,2)]
emp[c(1,3),c(1,2)]
emp$dept <- c('IT', 'HR', 'Finance')
emp
new.data <- data.frame(
emp_id = c(4,5),
emp_name = c('Tom', 'Jerry')
salary = c(2000,3000)
start_date = c('2019-10-11','2019-10-20'),
dept = c('IT', 'Finance'),
stringsAsFactors = F
)
new.data <- data.frame(
emp_id = c(4,5),
emp_name = c('Tom', 'Jerry')
salary = c(2000,3000)
start_date = c('2019-10-11','2019-10-20'),
dept = c('IT', 'Finance'),
stringsAsFactors = F)
new.data <- data.frame(
emp_id = c(4,5),
emp_name = c('Tom', 'Jerry')
salary = c(2000,3000)
start_date = c('2019-10-11','2019-10-20'),
dept = c('IT', 'Finance'))
new.data <- data.frame(emp_id = c(4,5),
emp_name = c('Tom', 'Jerry')
salary = c(2000,3000)
start_date = c('2019-10-11','2019-10-20'),
dept = c('IT', 'Finance'))
remoteLogin("http://machinelearn.eastus.cloudapp.azure.com",
session = T, diff = T, commandline = T, username = 'admin',
password = 'Pa$$w0rd2019')
remoteLogin("http://machinelearn.eastus.cloudapp.azure.com:12800",
session = T, diff = T, commandline = T, username = 'admin',
password = 'Pa$$w0rd2019')
mtcars
firstCar <- mtcars[1, ]
pause()
print(firstCar)
getRemoteObject(c("firstCar"))
print(firstcar)
print(firstCar)
resume()
exit
("C:\Users\user\Desktop\Day2\Labfiles")
setwd("C:\\Users\\user\\Desktop\\Day2\\Labfiles")
# Read the data from the 2000.csv file into a data frame and examine the first 10 rows
flightDataCsv <- "2000.csv"
flightDataSampleDF <- read.csv(flightDataCsv)
setwd("C:\\Users\\user\\Desktop\\Day2\\Labfiles\\Lab01")
# Read the data from the 2000.csv file into a data frame and examine the first 10 rows
flightDataCsv <- "2000.csv"
flightDataSampleDF <- read.csv(flightDataCsv)
head(flightDataSampleDF, 10)
mName <- function(mNum) {
month.name[mNum]
}
flightDataSampleDF$MonthName <- factor(lapply(flightDataSampleDF$Month, mName), levels = month.name)
# Perform some basic operations on the data. Time how long it takes to generate the summary
system.time(delaySummary <- summary(flightDataSampleDF))
print(delaySummary)
print(names(flightDataSampleDF))
print(nrow(flightDataSampleDF))
print(min(flightDataSampleDF$ArrDelay, na.rm = TRUE))
print(max(flightDataSampleDF$ArrDelay, na.rm = TRUE))
print(xtabs(~MonthName + as.factor(Cancelled == 1), flightDataSampleDF))
# Time how long it takes to generate a summary and display the results
system.time(rxDelaySummary <- rxSummary(~., flightDataSampleDF))
print(rxDelaySummary)
# Perform other ScaleR functions that examine the data
print(rxGetInfo(flightDataSampleDF))
print(rxGetVarInfo(flightDataSampleDF))
print(rxQuantile("ArrDelay", flightDataSampleDF))
print(rxCrossTabs(~MonthName:as.factor(Cancelled == 1), flightDataSampleDF))
print(rxCube(~MonthName:as.factor(Cancelled), flightDataSampleDF))
rm(flightDataSampleDF)
# Connect to the remote server
remoteLogin(deployr_endpoint = "http://machinelearn.eastus.cloudapp.azure.com:12800", session = TRUE, diff = TRUE, commandline = TRUE, username = "admin", password = "Pa$$w0rd2019")
pause()
# Copy the data file to the remote server
putLocalFile(c("2000.csv"))
resume()
# Read the data in (this is now running remotely)
flightDataCsv <- "2000.csv"
flightDataSampleDF <- read.csv(flightDataCsv)
mName <- function(mNum) {
month.name[mNum]
}
flightDataSampleDF$MonthName <- factor(lapply(flightDataSampleDF$Month, mName), levels = month.name)
# Display the first 10 rows
head(flightDataSampleDF, 10)
resume()
# Connect to the remote server
remoteLogin(deployr_endpoint = "http://machinelearn.eastus.cloudapp.azure.com:12800", session = TRUE, diff = TRUE, commandline = TRUE, username = "admin", password = "Pa$$w0rd2019")
resume()
# Read the data in (this is now running remotely)
flightDataCsv <- "2000.csv"
flightDataSampleDF <- read.csv(flightDataCsv)
mName <- function(mNum) {
month.name[mNum]
}
flightDataSampleDF$MonthName <- factor(lapply(flightDataSampleDF$Month, mName), levels = month.name)
# Display the first 10 rows
head(flightDataSampleDF, 10)
# Perform the same ScaleR operations as previously
rxRemoteDelaySummary <- rxSummary(~., flightDataSampleDF)
print(rxRemoteDelaySummary)
rxRemoteInfo <- rxGetInfo(flightDataSampleDF)
print(rxRemoteInfo)
rxRemoteVarInfo <- rxGetVarInfo(flightDataSampleDF)
print(rxRemoteVarInfo)
rxRemoteQuantileInfo <- rxQuantile("ArrDelay", flightDataSampleDF)
print(rxRemoteQuantileInfo)
rxRemoteCrossTabInfo <- rxCrossTabs(~MonthName:as.factor(Cancelled == 1), flightDataSampleDF)
print(rxRemoteCrossTabInfo)
rxRemoteCubeInfo <- rxCube(~MonthName:as.factor(Cancelled == 1), flightDataSampleDF)
print(rxRemoteCubeInfo)
pause()
# Copy the results back to the local R client and display them
getRemoteObject(c("rxRemoteDelaySummary", "rxRemoteInfo", "rxRemoteVarInfo", "rxRemoteQuantileInfo", "rxRemoteCrossTabInfo", "rxRemoteCubeInfo"))
print(rxRemoteDelaySummary)
print(rxRemoteInfo)
print(rxRemoteVarInfo)
print(rxRemoteQuantileInfo)
print(rxRemoteCrossTabInfo)
print(rxRemoteCubeInfo)
# Log out from the remote session
remoteLogout()
