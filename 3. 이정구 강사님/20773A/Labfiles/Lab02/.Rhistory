df7
# group_by
group_by(df, Index)
summarise_at(group_by(df, Index))
summarise_at(group_by(df, Index),vars(Y2011, Y2012))
view(df)
head(df)
tail(df)
view(df)
view(df)
View(df)
df %>% select(Index, State)
df_temp = sample_n(select(df, Index,State), 10)
sample_n(select(df, Index,State), 10)
df %>% select(Index, State) %>% sample_n(10) # 위아래가 동일함
df10 <- read.scv("exam.csv")
df10 <- read.scv("exam.csv")
df10 <- read.scv("exam.csv")
df10 <- read.csv("exam.csv")
str(df10)
df10
filter(df10, class == 1)
df10 %>% filter(class == 1)
filter(select(df10, class, math, english), class == 1)
library(dplyr)
df10 %>% filter(class == 1)
filter(df10, class == 1)
filter(select(df10, class, math, english), class == 1)
df10 %>%
select(class, math, english) %>%
filter(class == 1) %>%
arrange(class)
df10 %>%
select(class, math, english) %>%
filter(class == 1) %>%
arrange(desc(math))
df_temp <- df10 %>%
filter(class %in% c(1,3,5)) %>%
arrange(desc(english))
a <- 10
if(is.integer(a)){
print("X is ans Integer")
}
al <- 10L
if(is.integer(al)){
print("X is an Integer")
}
a2 <- c("What", "is", "truth")
if("Truth" %in% a2){
print("True")
} else {
print("False")
}
a3 <- switch(3, "One", "Two", "Three", "Four")
a3
a4 <- c("Hello", "R loop")
cnt <- 2
repeat{
print(a4)
cnt <- cnt + 1
print(cnt)
if(cnt > 5) {
break;
}
}
a5 <- c("Hello", "R loop")
cnt <- 2
while(cnt < 7){
print(a5)
cnt = cnt +1
}
a6 <- LETTERS[1:4]
a7 <- letters[1:4]
for(i in a6){
print(i)
}
myfunc <- function(a){
for(i in 1:a){
b <- 1*2
print(b)
}
}
myfunc(10)
myfunc2 <- function(){
for (i in 1:5){
print(i * 2)
}
}
myfunc2()
myfunc3(1,2)
myfunc3 <- function(a,b){
r <- a+b
print(r)
}
myfunc3(1,2)
myfunc3(a=1, b=2)
myfunc3(b=2, a=1)
myfunc3(1, b=3)
myfunc4 <- function(a=0, b=0){
r <- a + b
print(r)
}
myfunc4(a=1)
myfunc4(b=2)
myfunc5 <- function(a){c <- a}
myfunc5(1
myfunc5 <- function(a){c <- a}
myfunc5(1)
myfunc5 <- function(a){c <- a}
myfunc5(1)
df <- read.csv("exam.csv")
str(df)
df %>% select(id, class, math)
df %>%
select(id, class, math) %>%
filter(class == 1) %>%
arrange(desc(id))
df %>%
arrange(class, desc(id)) %>%
head(5)
df %>%
arrange(class, desc(id)) %>%
mutate(total = math + english + science,
mean = (math + english + science)/3)
library(magrittr)
df %>%
arrange(class, desc(id)) %>%
mutate(total = math + english + science,
mean = (math + english + science)/3)
df %>%
group_by(class)
df %>%
group_by(class) %>%
summarise(mean_math = mean(math),
median_math = median(math))
df %>%
group_by(class) %>%
summarise(mean_math = mean(math),
median_math = median(math),
sum_math = sum(math))
mpg <- as.data.frame(ggplot2::mpg)
str(mpg)
select(mpg, class)
mpg %>%
group_by(class) %>%
summarise(mean_cty=mean(cty))
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy))
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
order_by(mean_hwy)
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
order()
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
order()
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy))
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
ordered()
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy))
df6 <- select(df, Index, State)
df6
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
head(5)
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(mean_hwy) %>%
head(5)
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(desc(mean_hwy)) %>%
head(5)
mpg %>%
filter(displ <= 4 | displ > 5)
mpg %>%
filter(displ <= 4 | displ > 5) %>%
group_by(manufacturer)
mpg %>%
group_by(manufacturer) %>%
filter(displ <= 4 | displ >5)
mpg %>%
group_by(manufacturer) %>%
filter(displ <= 4 | displ >5) %>%
summarise(mean_four = mean(displ <= 4), mean_five = mean(displ >5))
# 1번 문제
mpg %>%
group_by(manufacturer) %>%
filter(displ <= 4 | displ >5) %>%
summarise(mean_four = mean(hwy), mean_five = mean(hwy))
mpg %>%
filter(displ <= 4 | displ >5) %>%
group_by(manufacturer) %>%
summarise(mean(hwy))
mpg %>%
group_by(manufacturer) %>%
filter(manufacturer = "audi")
mpg %>%
group_by(manufacturer) %>%
filter(manufacturer == "audi")
mpg %>%
group_by(manufacturer) %>%
filter(manufacturer == "audi") %>%
summarise(mean(cty))
mpg %>%
group_by(manufacturer) %>%
filter(manufacturer == "toyota") %>%
summarise(mean(cty))
mpg %>%
group_by(manufacturer) %>%
filter(displ <= 4) %>%
summarise(mean(hwy))
mpg %>%
group_by(manufacturer) %>%
filter(displ > 5) %>%
summarise(mean(hwy))
mpg %>%
group_by(displ <= 4) %>%
group_by(displ >= 5) %>%
filter(displ <= 4 | displ >= 5) %>%
summarise(mean_why = mean(why)) %>%
arrange(desc(mean_hwy))
mpg %>%
group_by(displ <= 4) %>%
group_by(displ >= 5) %>%
filter(displ <= 4 | displ >= 5) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(desc(mean_hwy))
mpg %>%
select(manufacturer, cty)
mpg %>%
select(manufacturer, cty) %>%
filter(manufacturer == 'auid' | manufacturer == 'toyota')
mpg %>%
select(manufacturer, cty) %>%
filter(manufacturer == 'auid' | manufacturer == 'toyota') %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
mpg %>%
select(manufacturer, cty) %>%
filter(manufacturer == 'auid' | manufacturer == 'toyota') %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
mpg %>%
select(manufacturer, cty) %>%
filter(manufacturer == 'auid' | manufacturer == 'toyota')
mpg %>%
select(manufacturer, cty) %>%
filter(manufacturer == 'audi' | manufacturer == 'toyota') %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
mpg %>%
select(manufacturer)
mpg %>%
select(manufacturer, hwy)
mpg %>%
filter(manufacturer == 'chevrolet' | manufacturer == 'ford' | manufacturer == 'honda') %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy))
mpg %>%
filter(manufacturer == 'chevrolet' | manufacturer == 'ford' | manufacturer == 'honda') %>%
summarise(mean_hwy = mean(hwy))
mpg_copy
mpg_copy <- mpg %>%
mutate(totaly = cty + hwy)
mpg_copy
mpg_copy %>%
mutate(mean_total = (cty+hwy) /2 )
mpg_copy %>%
arrange(desc(mean_total))
mpg_copy %>%
mutate(mean_total = (cty+hwy)/2)
mpg_copy
mpg_copy %>%
mutate(mean_total = totaly/2)
mpg_copy
mpg_copy %>%
arrange(desc(mean_total))
mpg_copy %>%
mutate(mean_total = totaly/2) %>%
arrange(desc(mean_total)) %>%
head(3)
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise('count' = n()) %>%
arrange(desc(count))
remoteLogin(
"http://tetetestml.eastus.cloudapp.azure.com:12800",
session = T,
diff = T,
commandline = T,
username = 'admin',
password = 'Pa$$w0rd2019'
)
sqlConnString <- "Driver=SQL Server;Server=chaemyung.database.windows.net;Database=AirlineData;Trusted_Connection=True"
connection <- RxSqlServerData(connectionString = sqlConnString,
table = "dbo.Airports", rowsPerRead = 1000)
# Flight delay data for the year 2000
setwd("C:\\TestData")
csvDataFile = "2000.csv"
conString <- "Server=chaemyung.database.windows.net;Database=AirlineData;Trusted_Connection=TRUE"
conString <- "Driver=SQL Server;Server=chaemyung.database.windows.net; Database=AirlineData;Uid=admin2019;Pwd=Pa$$w0rd2019"
conString <- "Driver=SQL Server;Server=chaemyung.database.windows.net; Database=AirlineData;Uid=admin2019;Pwd=Pa$$w0rd2019"
airportData <- RxSqlServerData(connectionString = conString, table = "Airports")
colClasses <- c(
"iata" = "character",
"airport" = "character",
"city" = "character",
"state" = "factor",
"country" = "factor",
"lat" = "numeric",
"long" = "numeric")
conString <- "Driver=SQL Server;Server=chaemyung.database.windows.net; Database=AirlineData;Uid=admin2019;Pwd=Pa$$w0rd2019"
airportData <- RxSqlServerData(connectionString = conString, table = "Airports")
colClasses <- c(
"iata" = "character",
"airport" = "character",
"city" = "character",
"state" = "factor",
"country" = "factor",
"lat" = "numeric",
"long" = "numeric")
conString <- "Driver=SQL Server;Server=chaemyung.database.windows.net; Database=AirlineData;Uid=admin2019;Pwd=Pa$$w0rd2019"
# Azure Database용
conString <- "Driver=SQL Server;Server=chaemyung.database.windows.net;Database=AirlineData;Uid=admin2019;Pwd=Pa$$w0rd2019"
exit
remoteLogin(
"http://tetetestml.eastus.cloudapp.azure.com:12800",
session = T,
diff = T,
commandline = T,
username = 'admin',
password = 'Pa$$w0rd2019'
)
# Azure Database용
conString <- "Driver=SQL Server;Server=chaemyung.database.windows.net;Database=AirlineData;Uid=admin2019;Pwd=Pa$$w0rd2019"
airportData <- RxSqlServerData(connectionString = conString, table = "Airports")
colClasses <- c(
"iata" = "character",
"airport" = "character",
"city" = "character",
"state" = "factor",
"country" = "factor",
"lat" = "numeric",
"long" = "numeric")
csvData <- RxTextData(file = "C:\\TestData\\airports.csv", colClasses = colClasses)
rxDataStep(inData = csvData, outFile = airportData, overwrite = TRUE)
head(connection)
sqlConnString <- "Driver=SQL Server;Server=LON-SQLR;Database=AirlineData;Trusted_Connection=True"
connection <- RxSqlServerData(connectionString = sqlConnString,
table = "dbo.Airports", rowsPerRead = 1000)
head(connection)
sqlConnString <- "Driver=SQL Server;Server=chaemyung.database.windows.net;Database=AirlineData;Trusted_Connection=True"
connection <- RxSqlServerData(connectionString = sqlConnString,
table = "dbo.Airports", rowsPerRead = 1000)
head(connection)
exit
remoteLogin(
"http://tetetestml.eastus.cloudapp.azure.com:12800",
session = T,
diff = T,
commandline = T,
username = 'admin',
password = 'Pa$$w0rd2019'
)
sqlConnString <- "Driver=SQL Server;Server=chaemyung.database.windows.net;Database=AirlineData;Trusted_Connection=True"
connection <- RxSqlServerData(connectionString = sqlConnString, table = "dbo.Airports", rowsPerRead = 1000)
head(connection)
airportData <- RxSqlServerData(connectionString = conString, table = "Airports")
conString <- "Driver=SQL Server;Server=chaemyung.database.windows.net;Database=AirlineData;Uid=admin2019;Pwd=Pa$$w0rd2019"
airportData <- RxSqlServerData(connectionString = conString, table = "Airports")
colClasses <- c(
"iata" = "character",
"airport" = "character",
"city" = "character",
"state" = "factor",
"country" = "factor",
"lat" = "numeric",
"long" = "numeric")
csvData <- RxTextData(file = "C:\\TestData\\airports.csv", colClasses = colClasses)
rxDataStep(inData = csvData, outFile = airportData, overwrite = TRUE)
sqlConnString <- "Driver=SQL Server;Server=chaemyung.database.windows.net;Database=AirlineData;Trusted_Connection=True"
connection <- RxSqlServerData(connectionString = sqlConnString, table = "dbo.Airports", rowsPerRead = 1000)
head(connection)
sqlConnString <- "Driver=SQL Server;Server=chaemyung.database.windows.net;Database=AirlineData;Trusted_Connection=True"
connection <- RxSqlServerData(connectionString = sqlConnString, table = "dbo.Airports", rowsPerRead = 1000)
head(connection)
sqlConnString <- "Driver=SQL Server;Server=chaemyung.database.windows.net;Database=AirlineData;Trusted_Connection=True"
connection <- RxSqlServerData(connectionString = sqlConnString,
table = "dbo.Airports", rowsPerRead = 1000)
head(connection)
sqlConnString <- "Driver=SQL Server;Server=chaemyung.database.windows.net;Database=AirlineData;Uid=admin2019;Pwd=Pa$$w0rd2019"
connection <- RxSqlServerData(connectionString = sqlConnString,
table = "dbo.Airports", rowsPerRead = 1000)
head(connection)
rxGetVarInfo(connection)
rxSummary(~., connection)
# 4번으로 할거
# Flight delay data for the year 2000
setwd("C:\\TestData")
csvDataFile = "2000.csv"
# 4번으로 할거
# Flight delay data for the year 2000
setwd("C:\\TestData")
exit
remoteLogin(
"http://tetetestml.eastus.cloudapp.azure.com:12800",
session = T,
diff = T,
commandline = T,
username = 'admin',
password = 'Pa$$w0rd2019'
)
conString <- "Driver=SQL Server;Server=chaemyung.database.windows.net;Database=AirlineData;Uid=admin2019;Pwd=Pa$$w0rd2019"
airportData <- RxSqlServerData(connectionString = conString, table = "Airports")
colClasses <- c(
"iata" = "character",
"airport" = "character",
"city" = "character",
"state" = "factor",
"country" = "factor",
"lat" = "numeric",
"long" = "numeric")
csvData <- RxTextData(file = "C:\\TestData\\airports.csv", colClasses = colClasses)
rxDataStep(inData = csvData, outFile = airportData, overwrite = TRUE)
sqlConnString <- "Driver=SQL Server;Server=chaemyung.database.windows.net;Database=AirlineData;Uid=admin2019;Pwd=Pa$$w0rd2019"
connection <- RxSqlServerData(connectionString = sqlConnString,
table = "dbo.Airports", rowsPerRead = 1000)
# 4번으로 할거
# Flight delay data for the year 2000
setwd("C:\\TestData")
csvDataFile = "2000.csv"
exit
# 4번으로 할거 - 로컬에서 하는거임
# Flight delay data for the year 2000
setwd("C:\\Users\\user\\Desktop\\새로운 강사님\\20190627")
csvDataFile = "2000.csv"
# Examine the raw data
rawData <- rxImport(csvDataFile, numRows = 1000)
# 4번으로 할거 - 로컬에서 하는거임
# Flight delay data for the year 2000
setwd("C:\\Users\\user\\Desktop\\새로운 강사님\\20190627")
csvDataFile = "2000.csv"
rawData <- rxImport(csvDataFile, numRows = 1000)
rxGetVarInfo(rawData)
# 4번으로 할거 - 로컬에서 하는거임
# Flight delay data for the year 2000
setwd("C:\\Users\\user\\Desktop\\새로운 강사님\\20190627")
csvDataFile = "2000.csv"
# Examine the raw data
rawData <- rxImport(csvDataFile, numRows = 1000)
# 4번으로 할거 - 로컬에서 하는거임
# Flight delay data for the year 2000
setwd("C:\\workspace")
csvDataFile = "2000.csv"
# Examine the raw data
rawData <- rxImport(csvDataFile, numRows = 1000)
rxGetVarInfo(rawData)
outFileName <- "2000.xdf"
filteredData <- rxImport(csvDataFile, outFile = outFileName,
overwrite = TRUE, append = "none",
transforms = list(Delay = ArrDelay + DepDelay),
rowSelection = ifelse(rbinom(.rxNumRows, size=1, prob=0.1), TRUE, FALSE))
# Examine the stucture of the XDF data - it should contain a Delay variable
# Note that Origin is a characater
rxGetVarInfo(filteredData)
# Generate a quick summary of the numeric data in the XDF file
rxSummary(~., filteredData)
# Summarize the delay fields
rxSummary(~Delay+ArrDelay+DepDelay, filteredData)
refactoredData = "2000Refactored.xdf"
refactoredXdf = RxXdfData(refactoredData)
rxFactors(inData = filteredData, outFile = refactoredXdf,
overwrite = TRUE, factorInfo = c("Origin", "Dest"))
rxSummary(Delay~Origin, refactoredXdf)
# Generate a crosstab showing the average delay
# for flights departing from each origin to each destination
rxCrossTabs(Delay ~ Origin:Dest, refactoredXdf, means = TRUE)
# Generate a cube of the same data
rxCube(Delay ~ Origin:Dest, refactoredXdf)
# Omit the routes that don't exist
rxCube(Delay ~ Origin:Dest, refactoredXdf, removeZeroCounts = TRUE)
setwd("C:\Users\user\Desktop\new\Labfiles\Lab02")
setwd("C:\\Users\\user\\Desktop\\new\\Labfiles\\Lab02")
# Examine the structure of the data file
flightDataSampleCsv <- "2000.csv"
flightDataSample <- rxImport(flightDataSampleCsv, numRows = 10)
rxGetVarInfo(flightDataSample)
