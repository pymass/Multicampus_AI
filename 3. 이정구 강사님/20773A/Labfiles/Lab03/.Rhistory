summarise_at(group_by(df, Index))
summarise_at(group_by(df, Index),vars(Y2011, Y2012))
view(df)
head(df)
tail(df)
view(df)
view(df)
View(df)
df %>% select(Index, State)
df_temp = sample_n(select(df, Index,State), 10)
sample_n(select(df, Index,State), 10)
df %>% select(Index, State) %>% sample_n(10) # 위아래가 동일함
df10 <- read.scv("exam.csv")
df10 <- read.scv("exam.csv")
df10 <- read.scv("exam.csv")
df10 <- read.csv("exam.csv")
str(df10)
df10
filter(df10, class == 1)
df10 %>% filter(class == 1)
filter(select(df10, class, math, english), class == 1)
library(dplyr)
df10 %>% filter(class == 1)
filter(df10, class == 1)
filter(select(df10, class, math, english), class == 1)
df10 %>%
select(class, math, english) %>%
filter(class == 1) %>%
arrange(class)
df10 %>%
select(class, math, english) %>%
filter(class == 1) %>%
arrange(desc(math))
df_temp <- df10 %>%
filter(class %in% c(1,3,5)) %>%
arrange(desc(english))
a <- 10
if(is.integer(a)){
print("X is ans Integer")
}
al <- 10L
if(is.integer(al)){
print("X is an Integer")
}
a2 <- c("What", "is", "truth")
if("Truth" %in% a2){
print("True")
} else {
print("False")
}
a3 <- switch(3, "One", "Two", "Three", "Four")
a3
a4 <- c("Hello", "R loop")
cnt <- 2
repeat{
print(a4)
cnt <- cnt + 1
print(cnt)
if(cnt > 5) {
break;
}
}
a5 <- c("Hello", "R loop")
cnt <- 2
while(cnt < 7){
print(a5)
cnt = cnt +1
}
a6 <- LETTERS[1:4]
a7 <- letters[1:4]
for(i in a6){
print(i)
}
myfunc <- function(a){
for(i in 1:a){
b <- 1*2
print(b)
}
}
myfunc(10)
myfunc2 <- function(){
for (i in 1:5){
print(i * 2)
}
}
myfunc2()
myfunc3(1,2)
myfunc3 <- function(a,b){
r <- a+b
print(r)
}
myfunc3(1,2)
myfunc3(a=1, b=2)
myfunc3(b=2, a=1)
myfunc3(1, b=3)
myfunc4 <- function(a=0, b=0){
r <- a + b
print(r)
}
myfunc4(a=1)
myfunc4(b=2)
myfunc5 <- function(a){c <- a}
myfunc5(1
myfunc5 <- function(a){c <- a}
myfunc5(1)
myfunc5 <- function(a){c <- a}
myfunc5(1)
df <- read.csv("exam.csv")
str(df)
df %>% select(id, class, math)
df %>%
select(id, class, math) %>%
filter(class == 1) %>%
arrange(desc(id))
df %>%
arrange(class, desc(id)) %>%
head(5)
df %>%
arrange(class, desc(id)) %>%
mutate(total = math + english + science,
mean = (math + english + science)/3)
library(magrittr)
df %>%
arrange(class, desc(id)) %>%
mutate(total = math + english + science,
mean = (math + english + science)/3)
df %>%
group_by(class)
df %>%
group_by(class) %>%
summarise(mean_math = mean(math),
median_math = median(math))
df %>%
group_by(class) %>%
summarise(mean_math = mean(math),
median_math = median(math),
sum_math = sum(math))
mpg <- as.data.frame(ggplot2::mpg)
str(mpg)
select(mpg, class)
mpg %>%
group_by(class) %>%
summarise(mean_cty=mean(cty))
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy))
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
order_by(mean_hwy)
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
order()
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
order()
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy))
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
ordered()
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy))
df6 <- select(df, Index, State)
df6
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
head(5)
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(mean_hwy) %>%
head(5)
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(desc(mean_hwy)) %>%
head(5)
mpg %>%
filter(displ <= 4 | displ > 5)
mpg %>%
filter(displ <= 4 | displ > 5) %>%
group_by(manufacturer)
mpg %>%
group_by(manufacturer) %>%
filter(displ <= 4 | displ >5)
mpg %>%
group_by(manufacturer) %>%
filter(displ <= 4 | displ >5) %>%
summarise(mean_four = mean(displ <= 4), mean_five = mean(displ >5))
# 1번 문제
mpg %>%
group_by(manufacturer) %>%
filter(displ <= 4 | displ >5) %>%
summarise(mean_four = mean(hwy), mean_five = mean(hwy))
mpg %>%
filter(displ <= 4 | displ >5) %>%
group_by(manufacturer) %>%
summarise(mean(hwy))
mpg %>%
group_by(manufacturer) %>%
filter(manufacturer = "audi")
mpg %>%
group_by(manufacturer) %>%
filter(manufacturer == "audi")
mpg %>%
group_by(manufacturer) %>%
filter(manufacturer == "audi") %>%
summarise(mean(cty))
mpg %>%
group_by(manufacturer) %>%
filter(manufacturer == "toyota") %>%
summarise(mean(cty))
mpg %>%
group_by(manufacturer) %>%
filter(displ <= 4) %>%
summarise(mean(hwy))
mpg %>%
group_by(manufacturer) %>%
filter(displ > 5) %>%
summarise(mean(hwy))
mpg %>%
group_by(displ <= 4) %>%
group_by(displ >= 5) %>%
filter(displ <= 4 | displ >= 5) %>%
summarise(mean_why = mean(why)) %>%
arrange(desc(mean_hwy))
mpg %>%
group_by(displ <= 4) %>%
group_by(displ >= 5) %>%
filter(displ <= 4 | displ >= 5) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(desc(mean_hwy))
mpg %>%
select(manufacturer, cty)
mpg %>%
select(manufacturer, cty) %>%
filter(manufacturer == 'auid' | manufacturer == 'toyota')
mpg %>%
select(manufacturer, cty) %>%
filter(manufacturer == 'auid' | manufacturer == 'toyota') %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
mpg %>%
select(manufacturer, cty) %>%
filter(manufacturer == 'auid' | manufacturer == 'toyota') %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
mpg %>%
select(manufacturer, cty) %>%
filter(manufacturer == 'auid' | manufacturer == 'toyota')
mpg %>%
select(manufacturer, cty) %>%
filter(manufacturer == 'audi' | manufacturer == 'toyota') %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
mpg %>%
select(manufacturer)
mpg %>%
select(manufacturer, hwy)
mpg %>%
filter(manufacturer == 'chevrolet' | manufacturer == 'ford' | manufacturer == 'honda') %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy))
mpg %>%
filter(manufacturer == 'chevrolet' | manufacturer == 'ford' | manufacturer == 'honda') %>%
summarise(mean_hwy = mean(hwy))
mpg_copy
mpg_copy <- mpg %>%
mutate(totaly = cty + hwy)
mpg_copy
mpg_copy %>%
mutate(mean_total = (cty+hwy) /2 )
mpg_copy %>%
arrange(desc(mean_total))
mpg_copy %>%
mutate(mean_total = (cty+hwy)/2)
mpg_copy
mpg_copy %>%
mutate(mean_total = totaly/2)
mpg_copy
mpg_copy %>%
arrange(desc(mean_total))
mpg_copy %>%
mutate(mean_total = totaly/2) %>%
arrange(desc(mean_total)) %>%
head(3)
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise('count' = n()) %>%
arrange(desc(count))
install.packages("dplyr")
delayPlotData %>%
filter(!is.na(Delay) & (Delay >= 0) & (Delay <= 1000)) %>%
ggplot(mapping = aes(x = Distance, y = Delay)) +
xlab("Distance (miles)") +
ylab("Delay (minutes)") +
geom_point(alpha = 1/50) +
geom_smooth(color = "red")
library(tidyverse)
delayPlotData %>%
filter(!is.na(Delay) & (Delay >= 0) & (Delay <= 1000)) %>%
ggplot(mapping = aes(x = Distance, y = Delay)) +
xlab("Distance (miles)") +
ylab("Delay (minutes)") +
geom_point(alpha = 1/50) +
geom_smooth(color = "red")
flightDelayDataXdf <- "FlightDelayData.xdf"
flightDelayData <- RxXdfData(flightDelayDataXdf)
rxOptions(reportProgress = 1)
delayPlotData <- rxImport(flightDelayData,
rowsPerRead = 1000000,
varsToKeep = c("Distance", "Delay", "Origin", "OriginState"),
rowSelection = (Distance) > 0 &
as.logical(rbinom(n = .rxNumRows, size = 1, prob = 0.02)))
library(tidyverse)
ggplot(data = delayPlotData) +
geom_point(mapping = aes(x = Distance, y = Delay)) +
xlab("Distance (miles)") +
ylab("Delay (minutes)")
delayPlotData %>%
filter(!is.na(Delay) & (Delay >= 0) & (Delay <= 1000)) %>%
ggplot(mapping = aes(x = Distance, y = Delay)) +
xlab("Distance (miles)") +
ylab("Delay (minutes)") +
geom_point(alpha = 1/50) +
geom_smooth(color = "red")
#Microsoft R DataSet
library(readr)
library(RevoScaleR)
list.files(rxGetOption("sampleDataDir"))
inDataFile <- file.path(rxGetOption("sampleDataDir"), "mortDefaultSmall2000.csv")
mortData <- rxImport(inData = inDataFile)
str(mortData)
rxGetVarInfo(mortData)
nrow(mortData)
ncol(mortData)
names(mortData)
head(mortData, 3)
rxGetInfo(mortData, getVarInfo = T, numRows = 5)
rxHistogram(~creditScore, data=mortData)
mortData2 <- rxDataStep(inData = mortData, varsToDrop = c("year"), rowSelection = creditScore < 800)
rxHistogram(~creditScore, data=mortData2)
mortData3 <- rxDataStep(inData = mortData,
varsToDrop = c("year"),
rowSelection = creditScore < 800,
transforms = list(
catDept = cut(ccDebt, breaks = c(0,6500, 13000),
labels = c("Low Debt", "High Debt")),
lowScore = creditScore < 625))
rxGetVarInfo(mortData3)
mortCube <- rxCube(~F(creditScore):catDept, data = mortData3)
head(mortCube)
rxLinePlot(Counts ~ creditScore|catDept, data = rxResultsDF(mortCube))
setwd("C:\\Users\\user\\Desktop\\new\\Labfiles\\Lab03")
flightDelayDataXdf <- "FlightDelayData.xdf"
flightDelayData <- RxXdfData(flightDelayDataXdf)
rxOptions(reportProgress = 1)
delayPlotData <- rxImport(flightDelayData,
rowsPerRead = 1000000,
varsToKeep = c("Distance", "Delay", "Origin", "OriginState"),
rowSelection = (Distance) > 0 &
as.logical(rbinom(n = .rxNumRows, size = 1, prob = 0.02)))
library(tidyverse)
ggplot(data = delayPlotData) +
geom_point(mapping = aes(x = Distance, y = Delay)) +
xlab("Distance (miles)") +
ylab("Delay (minutes)")
delayPlotData %>%
filter(!is.na(Delay) & (Delay >= 0) & (Delay <= 1000)) %>%
ggplot(mapping = aes(x = Distance, y = Delay)) +
xlab("Distance (miles)") +
ylab("Delay (minutes)") +
geom_point(alpha = 1/50) +
geom_smooth(color = "red")
delayPlotData %>%
filter(!is.na(Delay) & (Delay >= 0) & (Delay <= 1000)) %>%
ggplot(mapping = aes(x = Distance, y = Delay)) +
xlab("Distance (miles)") +
ylab("Delay (minutes)") +
geom_point(alpha = 1/50) +
geom_smooth(color = "red")
delayPlotData2 <- rxImport(delayPlotData, rowsPerRead = 100000,
rowSelection = !is.na(Delay) & (Delay >= 0) & (Delay <= 1000))
delayPlotData2 %>%
ggplot(mapping = aes(x = Distance, y = Delay)) +
xlab("Distance (miles)") +
ylab("Delay (minutes)") +
geom_point(alpha = 1/50) +
geom_smooth(color = "red")
delayPlotData2 %>%
ggplot(mapping = aes(x = Distance, y = Delay)) +
xlab("Distance (miles)") +
ylab("Delay (minutes)") +
geom_point(alpha = 1/50) +
geom_smooth(color = "red") +
theme(axis.text = element_text(size = 6)) +
facet_wrap( ~ OriginState, nrow = 8)
delayDataWithProportionsXdf <- "FlightDelayDataWithProportions.xdf"
delayPlotDataXdf <- rxImport(flightDelayData, outFile = delayDataWithProportionsXdf, overwrite = TRUE, append ="none", rowsPerRead = 1000000, varsToKeep = c("Distance", "ActualElapsedTime", "Delay", "Origin", "Dest", "OriginState", "DestState", "ArrDelay", "DepDelay", "CarrierDelay", "WeatherDelay", "NASDelay", "SecurityDelay", "LateAircraftDelay"), rowSelection = (Distance > 0) & (Delay >= 0) & (Delay <= 1000) & !is.na(ActualElapsedTime) & (ActualElapsedTime > 0), transforms = list(DelayPercent = (Delay / ActualElapsedTime) * 100))
#Microsoft R DataSet
library(readr)
library(RevoScaleR)
list.files(rxGetOption("sampleDataDir"))
inDataFile <- file.path(rxGetOption("sampleDataDir"), "mortDefaultSmall2000.csv")
mortData <- rxImport(inData = inDataFile)
str(mortData)
rxGetVarInfo(mortData)
nrow(mortData)
ncol(mortData)
names(mortData)
head(mortData, 3)
rxGetInfo(mortData, getVarInfo = T, numRows = 5)
rxHistogram(~creditScore, data=mortData)
mortData2 <- rxDataStep(inData = mortData, varsToDrop = c("year"), rowSelection = creditScore < 800)
rxHistogram(~creditScore, data=mortData2)
mortData3 <- rxDataStep(inData = mortData,
varsToDrop = c("year"),
rowSelection = creditScore < 800,
transforms = list(
catDept = cut(ccDebt, breaks = c(0,6500, 13000),
labels = c("Low Debt", "High Debt")),
lowScore = creditScore < 625))
rxGetVarInfo(mortData3)
mortCube <- rxCube(~F(creditScore):catDept, data = mortData3)
head(mortCube)
rxLinePlot(Counts ~ creditScore|catDept, data = rxResultsDF(mortCube))
setwd("C:\\Users\\user\\Desktop\\new\\Labfiles\\Lab03")
flightDelayDataXdf <- "FlightDelayData.xdf"
flightDelayData <- RxXdfData(flightDelayDataXdf)
rxOptions(reportProgress = 1)
delayPlotData <- rxImport(flightDelayData,
rowsPerRead = 1000000,
varsToKeep = c("Distance", "Delay", "Origin", "OriginState"),
rowSelection = (Distance) > 0 &
as.logical(rbinom(n = .rxNumRows, size = 1, prob = 0.02)))
library(tidyverse)
ggplot(data = delayPlotData) +
geom_point(mapping = aes(x = Distance, y = Delay)) +
xlab("Distance (miles)") +
ylab("Delay (minutes)")
delayPlotData2 <- rxImport(delayPlotData, rowsPerRead = 100000,
rowSelection = !is.na(Delay) & (Delay >= 0) & (Delay <= 1000))
delayPlotData2 %>%
ggplot(mapping = aes(x = Distance, y = Delay)) +
xlab("Distance (miles)") +
ylab("Delay (minutes)") +
geom_point(alpha = 1/50) +
geom_smooth(color = "red")
delayPlotData2 %>%
ggplot(mapping = aes(x = Distance, y = Delay)) +
xlab("Distance (miles)") +
ylab("Delay (minutes)") +
geom_point(alpha = 1/50) +
geom_smooth(color = "red") +
theme(axis.text = element_text(size = 6)) +
facet_wrap( ~ OriginState, nrow = 8)
delayDataWithProportionsXdf <- "FlightDelayDataWithProportions.xdf"
delayPlotDataXdf <- rxImport(flightDelayData, outFile = delayDataWithProportionsXdf, overwrite = TRUE, append ="none", rowsPerRead = 1000000, varsToKeep = c("Distance", "ActualElapsedTime", "Delay", "Origin", "Dest", "OriginState", "DestState", "ArrDelay", "DepDelay", "CarrierDelay", "WeatherDelay", "NASDelay", "SecurityDelay", "LateAircraftDelay"), rowSelection = (Distance > 0) & (Delay >= 0) & (Delay <= 1000) & !is.na(ActualElapsedTime) & (ActualElapsedTime > 0), transforms = list(DelayPercent = (Delay / ActualElapsedTime) * 100))
remoteLogin("http://dnlffldja.eastus.cloudapp.azure.com", diff = T, session = T, commandline = T)
#EX 1
# Connect to R Server
remoteLogin(deployr_endpoint = "http://dnlffldja.eastus.cloudapp.azure.com:12800", session = TRUE, diff = TRUE, commandline = TRUE, username = "admin", password = "Pa$$w0rd2019")
# Examine the factor levels in each dataset
airportData = RxXdfData("C:\\Data\\airportData.xdf")
flightDelayData = RxXdfData("C:\\Data\\flightDelayData.xdf")
iataFactor <- rxGetVarInfo(airportData, varsToKeep = c("iata"))
print(iataFactor)
originFactor <- rxGetVarInfo(flightDelayData, varsToKeep = c("Origin"))
print(originFactor)
destFactor <- rxGetVarInfo(flightDelayData, varsToKeep = c("Dest"))
print(destFactor)
# Create a set of levels for refactoring the datasets
refactorLevels <- unique(c(iataFactor$iata[["levels"]],
originFactor$Origin[["levels"]],
destFactor$Dest[["levels"]]))
# Refactor the datasets
rxOptions(reportProgress = 2)
refactoredAirportDataFile <- "C:\\Data\\RefactoredAirportData.xdf"
refactoredAirportData <- rxFactors(inData = airportData, outFile = refactoredAirportDataFile, overwrite = TRUE,
factorInfo = list(iata = list(newLevels = refactorLevels))
)
refactoredFlightDelayDataFile <- "C:\\Data\\RefactoredFlightDelayData.xdf"
refactoredFlightDelayData <- rxFactors(inData = flightDelayData, outFile = refactoredFlightDelayDataFile, overwrite = TRUE,
factorInfo = list(Origin = list(newLevels = refactorLevels),
Dest = list(newLevels = refactorLevels))
)
# Verify the new factor levels in each dataset. They should all be the same
iataFactor <- rxGetVarInfo(refactoredAirportData, varsToKeep = c("iata"))
print(iataFactor)
originFactor <- rxGetVarInfo(refactoredFlightDelayData, varsToKeep = c("Origin"))
print(originFactor)
destFactor <- rxGetVarInfo(refactoredFlightDelayData, varsToKeep = c("Dest"))
print(destFactor)
# Rename the iata variable as Origin - names must match when joining
names(refactoredAirportData)[[1]] <- "Origin"
