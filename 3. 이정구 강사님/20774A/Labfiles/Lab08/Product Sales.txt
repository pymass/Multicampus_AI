
# Evaluate Product Sales

Exploratory exercises over the product orders data for Wide World Importers

- What are the top 20 most popular products?
- How do sales of the most popular product vary over time?
- Is there a pattern to these sales?


```R
library(AzureML)
library(dplyr)
library(ggplot2)
library(scales)

install.packages("xts") # You also need to install the xts package
library(xts)

install.packages("broom") # And the broom package
library(broom)
```


```R
library("AzureML")
ws <- workspace()
ordersDataSet <- download.datasets(ws, "Wide World Importers")
head(ordersDataSet)
```

The same product might occur in more than one order. Generate a list of products and their descriptions that have been ordered at least once. Each product should occur only once in the list. Store the result in another dataset called *stockItemsDataSet*.


```R
ordersDataSet %>%
  select(StockItemID, Description) %>%
  distinct() -> stockItemsDataSet

head(stockItemsDataSet)
```

Find which products are the most popular, using a *dplyr* pipeline as follows:

- Extract the StockItemID and quantity sold for each order
- Group the results by StockItemID
- Sum the quantity sold for each group, and name the column as *numOrdered*
- Order the results in descending order of *numOrdered* (the most popular items will be at the top of the list)
- Limit the results to the first 20 rows

Save the results in another dataset named *numOrderedDataSet*


```R
ordersDataSet %>%
  select(StockItemID, Quantity) %>%
  group_by(StockItemID) %>%
  summarize(numOrdered = sum(Quantity)) %>% 
  arrange(desc(numOrdered)) %>%
  filter(row_number() <= 20) -> numOrderedDataSet

head(numOrderedDataSet)
```

Combine the *numOrderedDataSet* and the *stockItemsDataSet* over the *StockItemID* column so that the list contains the *StockItemID*, *numOrdered*, and *Description* columns


```R
results <- inner_join(numOrderedDataSet, stockItemsDataSet, by = "StockItemID")

head(results)
```

Generate a graph showing the product descriptions on the X-axis and the number ordered on the Y-axis


```R
options(repr.plot.width=10, repr.plot.height=8)  
ggplot(results) +
  geom_point(mapping = aes(x = reorder(Description, -numOrdered), y = numOrdered), color = "red", size = 5) +
  labs(x = "Product", y = "Total Ordered") +
  scale_x_discrete(labels = function(x) { lapply(strwrap(x, width = 25, simplify = FALSE), paste, collapse = "\n")}) +
  theme(axis.text.x = element_text(angle = 90, size = 10))
```

## How do product sales vary over time?

Product 191 (Black and orange fragile despatch tape 48mmx75m) is the most popular product. How do sales of this product vary over time (if at all). 

Find all sales of product 191.


```R
ordersDataSet %>%
  filter(StockItemID == 191) -> productSalesDataSet

head(productSalesDataSet)
str(productSalesDataSet)

```

Reorganize the data as a time series, based on the *PickingCompletedWhen* column. Note that this column is actually a string (chr) in month/day/year format, so it needs to be converted to a datetime.


```R
timeSeriesOrders <- xts(productSalesDataSet[c("StockItemID", "Quantity")], 
                        order.by = as.POSIXct(productSalesDataSet$PickingCompletedWhen, format = "%m/%d/%Y"))
head(timeSeriesOrders)
```

Work out how many units where ordered each day.


```R
dailyTotals <- apply.daily(timeSeriesOrders, function(x){ apply(x$Quantity, 2, sum)})

head(dailyTotals)
```

Plot a graph showing how the sales vary by day.

First, the time series must be converted back into a dataframe to work with ggplot.


```R
graphData <- tidy(dailyTotals)
head(graphData)
```

Then convert the index column back into a datetime value.


```R
graphData$index <- as.POSIXct(graphData$index, origin="1970-01-01")
head(graphData)
```

Finally, plot the data.


```R
options(repr.plot.width=15, repr.plot.height=5)
ggplot(graphData, aes(x = index, y = value)) +
  ggtitle("Product Sales Over Time for Product 191") +
  xlab("Date") +
  ylab("Units Sold") +
  scale_x_datetime(labels = date_format("%Y-%m"), breaks = date_breaks("months")) +
  theme(axis.text.x = element_text(angle = 45)) +
  geom_point(color = "blue")
```

## Is there a pattern to these sales?

Focus on sales for 2013.


```R
firstDay <- as.POSIXct("2013-01-01")
lastDay <- as.POSIXct("2013-12-31")
day1 <- as.numeric(firstDay)
dayN <- as.numeric(lastDay)
productSalesFor2013 <- filter(graphData, (index >= day1) & (index <= dayN))

options(repr.plot.width=15, repr.plot.height=5)
ggplot(productSalesFor2013, aes(x = index, y = value)) +
  ggtitle("Product Sales for Product 191 in 2013") +
  xlab("Date") +
  ylab("Units Sold") +
  scale_x_datetime(labels = date_format("%Y-%m"), breaks = date_breaks("months")) +
  theme(axis.text.x = element_text(angle = 45)) +
  geom_point(color = "blue")
```

Fit a curve to the sales, and then compare to curves for 2014 and 2015 to see if there is a regular pattern.


```R
ggplot(productSalesFor2013, aes(x = index, y = value)) +
  ggtitle("Product Sales for Product 191 in 2013") +
  xlab("Date") +
  ylab("Units Sold") +
  scale_x_datetime(labels = date_format("%Y-%m"), breaks = date_breaks("months")) +
  theme(axis.text.x = element_text(angle = 45)) +
  geom_point(color = "black", alpha = 0.2) +
  geom_smooth(method = "lm", formula = y ~ poly(x, 9))
```

The graph and curve for 2014.


```R
firstDay <- as.POSIXct("2014-01-01")
lastDay <- as.POSIXct("2014-12-31")
day1 <- as.numeric(firstDay)
dayN <- as.numeric(lastDay)
productSalesFor2014 <- filter(graphData, (index >= day1) & (index <= dayN))

ggplot(productSalesFor2014, aes(x = index, y = value)) +
  ggtitle("Product Sales for Product 191 in 2014") +
  xlab("Date") +
  ylab("Units Sold") +
  scale_x_datetime(labels = date_format("%Y-%m"), breaks = date_breaks("months")) +
  theme(axis.text.x = element_text(angle = 45)) +
  geom_point(color = "black", alpha = 0.2) +
  geom_smooth(method = "lm", formula = y ~ poly(x, 9))
```

The graph and curve for 2015.


```R
firstDay <- as.POSIXct("2015-01-01")
lastDay <- as.POSIXct("2015-12-31")
day1 <- as.numeric(firstDay)
dayN <- as.numeric(lastDay)
productSalesFor2015 <- filter(graphData, (index >= day1) & (index <= dayN))

ggplot(productSalesFor2015, aes(x = index, y = value)) +
  ggtitle("Product Sales for Product 191 in 2015") +
  xlab("Date") +
  ylab("Units Sold") +
  scale_x_datetime(labels = date_format("%Y-%m"), breaks = date_breaks("months")) +
  theme(axis.text.x = element_text(angle = 45)) +
  geom_point(color = "black", alpha = 0.2) +
  geom_smooth(method = "lm", formula = y ~ poly(x, 9))
```
