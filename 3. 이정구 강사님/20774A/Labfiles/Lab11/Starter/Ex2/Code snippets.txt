########### Snippet 1

<Window x:Class="FaceAnalyzer.MainWindow"
         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"       
         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"        
         Title="MainWindow" Height="350" Width="450">        
     <Grid x:Name="BackPanel">    
         <Image x:Name="FacePhoto" Stretch="Uniform" Margin="0,0,0,30"/>        
         <Button x:Name="BrowseButton" Margin="20,5" Height="20"         
                 VerticalAlignment="Bottom" Content="Browse..."                
                 Click="BrowseButton_Click"/>                
     </Grid>    
 </Window>

########### End of Snippet 1
########### Snippet 2

private void BrowseButton_Click(object sender, RoutedEventArgs e)
 {
     var openDlg = new Microsoft.Win32.OpenFileDialog();

     openDlg.Filter = "JPEG Image(*.jpg)|*.jpg";
     bool? result = openDlg.ShowDialog(this);

     if (!(bool)result)
     {
         return;
     }

     string filePath = openDlg.FileName;

     Uri fileUri = new Uri(filePath);
     BitmapImage bitmapSource = new BitmapImage();

     bitmapSource.BeginInit();
     bitmapSource.CacheOption = BitmapCacheOption.None;
     bitmapSource.UriSource = fileUri;
     bitmapSource.EndInit();

     FacePhoto.Source = bitmapSource;
 }


########### End of Snippet 2
########### Snippet 3


using System.IO; 
using Microsoft.ProjectOxford.Face; 
using Microsoft.ProjectOxford.Face.Contract;

########### End of Snippet 3
########### Snipper 4

//Replace the word key with your Face API subscription key.
private readonly IFaceServiceClient faceServiceClient = new FaceServiceClient("key"); 

########### End of Snippet 4
########### Snipper 5

private async Task<FaceRectangle[]> UploadAndDetectFaces(string imageFilePath)
{
    try
    {
        using (Stream imageFileStream = File.OpenRead(imageFilePath))
        {
            var faces = await faceServiceClient.DetectAsync(imageFileStream);
            var faceRects = faces.Select(face => face.FaceRectangle);
            return faceRects.ToArray();
        }
    }
    catch (Exception)
    {
        return new FaceRectangle[0];
    }
}

########### End of Snippet 5
########### Snipper 6

private async void BrowseButton_Click(object sender, RoutedEventArgs e)

########### End of Snippet 6
########### Snipper 7

Title = "Detecting...";
FaceRectangle[] faceRects = await UploadAndDetectFaces(filePath);
Title = String.Format("Detection Finished. {0} face(s) detected", faceRects.Length);

if (faceRects.Length > 0)
{
    DrawingVisual visual = new DrawingVisual();
    DrawingContext drawingContext = visual.RenderOpen();
    drawingContext.DrawImage(bitmapSource,
        new Rect(0, 0, bitmapSource.Width, bitmapSource.Height));
    double dpi = bitmapSource.DpiX;
    double resizeFactor = 96 / dpi;

    foreach (var faceRect in faceRects)
    {
        drawingContext.DrawRectangle(
            Brushes.Transparent,
            new Pen(Brushes.Red, 2),
            new Rect(
                faceRect.Left * resizeFactor,
                faceRect.Top * resizeFactor,
                faceRect.Width * resizeFactor,
                faceRect.Height * resizeFactor
                )
        );
    }

    drawingContext.Close();
    RenderTargetBitmap faceWithRectBitmap = new RenderTargetBitmap(
        (int)(bitmapSource.PixelWidth * resizeFactor),
        (int)(bitmapSource.PixelHeight * resizeFactor),
        96,
        96,
        PixelFormats.Pbgra32);

    faceWithRectBitmap.Render(visual);
    FacePhoto.Source = faceWithRectBitmap;
}

########### End of Snippet 7






